// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package mssql

import (
	"database/sql"
	"fmt"
	_ "github.com/denisenkom/go-mssqldb"
	"github.com/elastic/beats/metricbeat/mb"
	"net/url"
)

func init() {
	if err := mb.Registry.AddModule("mssql", newModule); err != nil {
		panic(err)
	}
}

type MetricSet struct {
	mb.BaseMetricSet
}

type Config struct {
	Host     string `config:"host" validate:"nonzero,required"`
	User     string `config:"user" validate:"nonzero,required"`
	Password string `config:"password" validate:"nonzero,required"`
	Port     int    `config:"port" validate:"nonzero,required"`
}

func NewMetricSet(base mb.BaseMetricSet) (*MetricSet, error) {
	var config Config
	err := base.Module().UnpackConfig(&config)
	if err != nil {
		return nil, err
	}

	return &MetricSet{BaseMetricSet: base}, nil
}

// NewDB returns a *sql.DB instance created with the provided configuration. Useful to be called on each Fetch method
// from each metricset
func NewDB(config *Config) (*sql.DB, error) {
	u := &url.URL{
		Scheme: "sqlserver",
		User:   url.UserPassword(config.User, config.Password),
		Host:   fmt.Sprintf("%s:%d", config.Host, config.Port),
	}
	return sql.Open("sqlserver", u.String())
}

func newModule(base mb.BaseModule) (mb.Module, error) {
	var config Config
	if err := base.UnpackConfig(&config); err != nil {
		return nil, err
	}

	return &base, nil
}
